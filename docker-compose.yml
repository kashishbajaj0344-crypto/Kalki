version: '3.8'

services:
  kalki:
    build: .
    container_name: kalki-orchestrator
    ports:
      - "8000:8000"
      - "1420:1420"  # For desktop app development
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    environment:
      - KALKI_ENV=production
      - PYTHONPATH=/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "kalki_orchestrator.py", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - kalki-network

  # Optional: Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: kalki-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - kalki-network
    command: redis-server --appendonly yes

  # Optional: PostgreSQL for advanced data persistence
  postgres:
    image: postgres:15-alpine
    container_name: kalki-postgres
    environment:
      POSTGRES_DB: kalki
      POSTGRES_USER: kalki
      POSTGRES_PASSWORD: kalki_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - kalki-network

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: kalki-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - kalki-network

volumes:
  redis_data:
  postgres_data:
  prometheus_data:

networks:
  kalki-network:
    driver: bridge